<?xml version="1.0" encoding="UTF-8"?>
<data xmlns="ns:workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="ns:workflow resource:WorkflowData">
    <styles xmlns="ns:workflow/Style" xsi:schemaLocation="ns:workflow/Style resource:Style">
        <style name="KRPropDev.email.style">
            <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
                <xsl:strip-space elements="*"/>
                <xsl:key match="summarizedActionItem" name="doctypes-by-name" use="docName"/>
                <xsl:template match="immediateReminder">
                    <xsl:variable name="docHandlerUrl" select="actionItem/actionItem/docHandlerURL"/>
                    <email xmlns="">
                        <subject>Kuali Research Proposal Development Action List Reminder
                            <xsl:value-of select="actionItem/customSubject"/>
                        </subject>
                        <body>Your Action List has a proposal document that needs your review and/or approval:

Document ID: <xsl:value-of select="actionItem/actionItem/documentId"/>
Initiator: <xsl:value-of select="actionItem/docInitiatorDisplayName"/>
Type: <xsl:value-of select="actionItem/documentType/label"/>
Title: <xsl:value-of select="actionItem/actionItem/docTitle"/>

To open the proposal document:
    Go to <xsl:value-of select="@emailUrlPrefix"/><xsl:value-of select="$docHandlerUrl"/><xsl:choose>
    <xsl:when test="contains($docHandlerUrl, '?')">&amp;</xsl:when>
    <xsl:otherwise>?</xsl:otherwise>
</xsl:choose>docId=<xsl:value-of select="actionItem/actionItem/documentId"/>&amp;command=displayActionListView

Or you may access the proposal from your Action List:
    Go to <xsl:value-of select="@emailUrlPrefix"/><xsl:value-of select="@actionListUrl"/>, and then click on the numeric Document ID: <xsl:value-of select="actionItem/actionItem/documentId"/> in the first column of the List.

** If you have questions about this proposal, please contact your department research administrator

To view the route log of this document:

    Go to <xsl:value-of select="@emailUrlPrefix"/><xsl:value-of select="@routeLogUrl"/><xsl:value-of select="actionItem/actionItem/documentId"/>

To change how these email notifications are sent(daily, weekly or none):
    Go to <xsl:value-of select="@emailUrlPrefix"/><xsl:value-of select="@preferencesUrl"/>

For additional help, submit help request https://jira.research.colostate.edu/servicedesk/customer/portal/1/create/5

<xsl:if test="@env != 'prd'">
    Action Item sent to     <xsl:value-of select="actionItem/actionItemAuthenticationUserId/id"/>
    <xsl:if test="string(actionItem/actionItem/delegationType)">
        for delegation type
        <xsl:value-of select="actionItem/actionItem/delegationType"/>
    </xsl:if>
</xsl:if>

emailUrlPrefix: <xsl:value-of select="@emailUrlPrefix"/>
actionListUrl: <xsl:value-of select="@actionListUrl"/>
preferenceUrl: <xsl:value-of select="@preferencesUrl"/>
routeLogUrl: <xsl:value-of select="@routeLogUrl"/>
documentId: <xsl:value-of select="actionItem/actionItem/documentId"/>
docHandlerUrl: <xsl:value-of select="$docHandlerUrl"/>

<xsl:value-of select="actionItem/customBody"/>
                        </body>
                    </email>
                </xsl:template>

                <xsl:template match="dailyReminder">
                    <email xmlns="">
                        <subject>Daily Kuali Action List Reminder</subject>
                        <body>Your Kuali Action List has
<xsl:value-of select="count(summarizedActionItem)"/>
documents that need your attention:
<!-- "Muenchian" method of grouping: http://www.jenitennison.com/xslt/grouping/muenchian.html
     this clever little expression ensures that we only match the FIRST node
     for which there is a name-to-nodeset mapping.  More specifically, we want
     to ensure that we only match ONCE, but the FIRST node is the best node
     to match ONCE (or at least it's as good as any other; depends on whether
     we want to preserve relative ordering, etc.) -->
<xsl:for-each
        select="summarizedActionItem[count(. | key('doctypes-by-name', docName)[1]) = 1]">
    <!-- the xsl:sort modifies the for-each selection order (I think) -->
    <!-- <xsl:sort select="name" /> -->
    <!-- sort by count -->
    <!-- the order of identical values will be arbitrary in the Java map-based implementation;
         switching this to desceding here because 1) it seems more useful for a user and
         2) I want the unit test to pass, and given that it only uses two doc types, reversing
         the order will make it match the literal output of the Java version ;) -->
    <xsl:sort data-type="number" order="descending"
              select="count(key('doctypes-by-name', docName))"/>
    <xsl:text></xsl:text>
    <xsl:value-of select="count(key('doctypes-by-name', docName))"/>
    <xsl:text></xsl:text>
    <xsl:value-of select="docName"/>
    <xsl-test>-</xsl-test>
    <xsl:value-of select="docLabel"/>
    <xsl:text>
    </xsl:text>
</xsl:for-each>

To respond to each of these eDocs:
Go to <xsl:value-of select="@emailUrlPrefix"/><xsl:value-of select="@actionListUrl"/>, and then click on its numeric Document ID in the first column of the List.

To change how these email notifications are sent (immediately, weekly or none):
    Go to <xsl:value-of select="@emailUrlPrefix"/><xsl:value-of select="@preferencesUrl"/>

For additional help, email <![CDATA[<mailto:]]><xsl:value-of
        select="@applicationEmailAddress"/><![CDATA[>]]>


                        </body>
                    </email>
                </xsl:template>

                <xsl:template match="weeklyReminder">
                    <email xmlns="">
                        <subject>Weekly Kuali Action List Reminder</subject>
                        <body>Your Kuali Action List has
<xsl:value-of select="count(summarizedActionItem)"/>
eDocs (electronic documents) that need your attention:
<!-- "Muenchian" method of grouping: http://www.jenitennison.com/xslt/grouping/muenchian.html
     this clever little expression ensures that we only match the FIRST node
     for which there is a name-to-nodeset mapping.  More specifically, we want
     to ensure that we only match ONCE, but the FIRST node is the best node
     to match ONCE (or at least it's as good as any other; depends on whether
     we want to preserve relative ordering, etc.) -->
<xsl:for-each
        select="summarizedActionItem[count(. | key('doctypes-by-name', docName)[1]) = 1]">
    <!-- the xsl:sort modifies the for-each selection order (I think) -->
    <!-- <xsl:sort select="name" /> -->
    <!-- sort by count -->
    <!-- the order of identical values will be arbitrary in the Java map-based implementation;
         switching this to desceding here because 1) it seems more useful for a user and
         2) I want the unit test to pass, and given that it only uses two doc types, reversing
         the order will make it match the literal output of the Java version ;) -->
    <xsl:sort data-type="number" order="descending"
              select="count(key('doctypes-by-name', docName))"/>
    <xsl:text></xsl:text>
    <xsl:value-of select="count(key('doctypes-by-name', docName))"/>
    <xsl:text></xsl:text>
    <xsl:value-of select="docName"/>
    <xsl-test>-</xsl-test>
    <xsl:value-of select="docLabel"/>
    <xsl:text>
    </xsl:text>
</xsl:for-each>

To respond to each of these eDocs:
Go to
<xsl:value-of select="@emailUrlPrefix"/>
<xsl:value-of select="@actionListUrl"/>, and then click on its numeric Document ID in the
first column of the List.


To change how these email notifications are sent (immediately, weekly or none):
Go to
<xsl:value-of select="@emailUrlPrefix"/>
<xsl:value-of select="@preferencesUrl"/>


For additional help, submit help request https://jira.research.colostate.edu/servicedesk/customer/portal/1/create/5


                        </body>
                    </email>
                </xsl:template>

                <xsl:template match="feedback">
                    <email xmlns="">
                        <subject>Feedback from
                            <xsl:value-of select="networkId"/>
                            <xsl:variable name="routeHeaderId" select="routeHeaderId"/>
                            <xsl:choose>
                                <xsl:when test="string($routeHeaderId)">for document
                                    <xsl:value-of select="$routeHeaderId"/>
                                </xsl:when>
                            </xsl:choose>
                        </subject>
                        <body>
{code}
Network ID: <xsl:value-of select="networkId"/>
Name: <xsl:value-of select="userName"/>
Email: <xsl:value-of select="userEmail"/>
Phone: <xsl:value-of select="phone"/>
Time: <xsl:value-of select="timeDate"/>
Environment: <xsl:value-of select="@env"/>

Document type: <xsl:value-of select="documentType"/>
Document id: <xsl:value-of select="routeHeaderId"/>

Category: <xsl:value-of select="edenCategory"/>
Comments: <xsl:value-of select="comments"/>

Exception: <xsl:value-of select="exception"/>
{code}
                        </body>
                    </email>
                </xsl:template>
            </xsl:stylesheet>
        </style>
    </styles>
</data>
